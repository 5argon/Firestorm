// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: query.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Firestore.V1Beta1 {

  /// <summary>Holder for reflection information generated from query.proto</summary>
  public static partial class QueryReflection {

    #region Descriptor
    /// <summary>File descriptor for query.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QueryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtxdWVyeS5wcm90bxIYZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExGhxnb29n",
            "bGUvYXBpL2Fubm90YXRpb25zLnByb3RvGidnb29nbGUvZmlyZXN0b3JlL3Yx",
            "YmV0YTEvZG9jdW1lbnQucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVy",
            "cy5wcm90byK5DwoPU3RydWN0dXJlZFF1ZXJ5EkQKBnNlbGVjdBgBIAEoCzI0",
            "Lmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuUHJv",
            "amVjdGlvbhJKCgRmcm9tGAIgAygLMjwuZ29vZ2xlLmZpcmVzdG9yZS52MWJl",
            "dGExLlN0cnVjdHVyZWRRdWVyeS5Db2xsZWN0aW9uU2VsZWN0b3ISPwoFd2hl",
            "cmUYAyABKAsyMC5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuU3RydWN0dXJl",
            "ZFF1ZXJ5LkZpbHRlchJBCghvcmRlcl9ieRgEIAMoCzIvLmdvb2dsZS5maXJl",
            "c3RvcmUudjFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuT3JkZXISMgoIc3RhcnRf",
            "YXQYByABKAsyIC5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuQ3Vyc29yEjAK",
            "BmVuZF9hdBgIIAEoCzIgLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5DdXJz",
            "b3ISDgoGb2Zmc2V0GAYgASgFEioKBWxpbWl0GAUgASgLMhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkludDMyVmFsdWUaRAoSQ29sbGVjdGlvblNlbGVjdG9yEhUKDWNv",
            "bGxlY3Rpb25faWQYAiABKAkSFwoPYWxsX2Rlc2NlbmRhbnRzGAMgASgIGowC",
            "CgZGaWx0ZXISVQoQY29tcG9zaXRlX2ZpbHRlchgBIAEoCzI5Lmdvb2dsZS5m",
            "aXJlc3RvcmUudjFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuQ29tcG9zaXRlRmls",
            "dGVySAASTQoMZmllbGRfZmlsdGVyGAIgASgLMjUuZ29vZ2xlLmZpcmVzdG9y",
            "ZS52MWJldGExLlN0cnVjdHVyZWRRdWVyeS5GaWVsZEZpbHRlckgAEk0KDHVu",
            "YXJ5X2ZpbHRlchgDIAEoCzI1Lmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5T",
            "dHJ1Y3R1cmVkUXVlcnkuVW5hcnlGaWx0ZXJIAEINCgtmaWx0ZXJfdHlwZRrT",
            "AQoPQ29tcG9zaXRlRmlsdGVyEk4KAm9wGAEgASgOMkIuZ29vZ2xlLmZpcmVz",
            "dG9yZS52MWJldGExLlN0cnVjdHVyZWRRdWVyeS5Db21wb3NpdGVGaWx0ZXIu",
            "T3BlcmF0b3ISQQoHZmlsdGVycxgCIAMoCzIwLmdvb2dsZS5maXJlc3RvcmUu",
            "djFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuRmlsdGVyIi0KCE9wZXJhdG9yEhgK",
            "FE9QRVJBVE9SX1VOU1BFQ0lGSUVEEAASBwoDQU5EEAEa7AIKC0ZpZWxkRmls",
            "dGVyEkcKBWZpZWxkGAEgASgLMjguZ29vZ2xlLmZpcmVzdG9yZS52MWJldGEx",
            "LlN0cnVjdHVyZWRRdWVyeS5GaWVsZFJlZmVyZW5jZRJKCgJvcBgCIAEoDjI+",
            "Lmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuRmll",
            "bGRGaWx0ZXIuT3BlcmF0b3ISLgoFdmFsdWUYAyABKAsyHy5nb29nbGUuZmly",
            "ZXN0b3JlLnYxYmV0YTEuVmFsdWUilwEKCE9wZXJhdG9yEhgKFE9QRVJBVE9S",
            "X1VOU1BFQ0lGSUVEEAASDQoJTEVTU19USEFOEAESFgoSTEVTU19USEFOX09S",
            "X0VRVUFMEAISEAoMR1JFQVRFUl9USEFOEAMSGQoVR1JFQVRFUl9USEFOX09S",
            "X0VRVUFMEAQSCQoFRVFVQUwQBRISCg5BUlJBWV9DT05UQUlOUxAHGvMBCgtV",
            "bmFyeUZpbHRlchJKCgJvcBgBIAEoDjI+Lmdvb2dsZS5maXJlc3RvcmUudjFi",
            "ZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuVW5hcnlGaWx0ZXIuT3BlcmF0b3ISSQoF",
            "ZmllbGQYAiABKAsyOC5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuU3RydWN0",
            "dXJlZFF1ZXJ5LkZpZWxkUmVmZXJlbmNlSAAiPQoIT3BlcmF0b3ISGAoUT1BF",
            "UkFUT1JfVU5TUEVDSUZJRUQQABIKCgZJU19OQU4QAhILCgdJU19OVUxMEANC",
            "DgoMb3BlcmFuZF90eXBlGpgBCgVPcmRlchJHCgVmaWVsZBgBIAEoCzI4Lmdv",
            "b2dsZS5maXJlc3RvcmUudjFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuRmllbGRS",
            "ZWZlcmVuY2USRgoJZGlyZWN0aW9uGAIgASgOMjMuZ29vZ2xlLmZpcmVzdG9y",
            "ZS52MWJldGExLlN0cnVjdHVyZWRRdWVyeS5EaXJlY3Rpb24aJAoORmllbGRS",
            "ZWZlcmVuY2USEgoKZmllbGRfcGF0aBgCIAEoCRpWCgpQcm9qZWN0aW9uEkgK",
            "BmZpZWxkcxgCIAMoCzI4Lmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5TdHJ1",
            "Y3R1cmVkUXVlcnkuRmllbGRSZWZlcmVuY2UiRQoJRGlyZWN0aW9uEhkKFURJ",
            "UkVDVElPTl9VTlNQRUNJRklFRBAAEg0KCUFTQ0VORElORxABEg4KCkRFU0NF",
            "TkRJTkcQAiJJCgZDdXJzb3ISLwoGdmFsdWVzGAEgAygLMh8uZ29vZ2xlLmZp",
            "cmVzdG9yZS52MWJldGExLlZhbHVlEg4KBmJlZm9yZRgCIAEoCEK4AQocY29t",
            "Lmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMUIKUXVlcnlQcm90b1ABWkFnb29n",
            "bGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2ZpcmVzdG9yZS92",
            "MWJldGExO2ZpcmVzdG9yZaICBEdDRlOqAh5Hb29nbGUuQ2xvdWQuRmlyZXN0",
            "b3JlLlYxQmV0YTHKAh5Hb29nbGVcQ2xvdWRcRmlyZXN0b3JlXFYxYmV0YTFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Cloud.Firestore.V1Beta1.DocumentReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.StructuredQuery), global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Parser, new[]{ "Select", "From", "Where", "OrderBy", "StartAt", "EndAt", "Offset", "Limit" }, null, new[]{ typeof(global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Direction) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CollectionSelector), global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CollectionSelector.Parser, new[]{ "CollectionId", "AllDescendants" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Filter), global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Filter.Parser, new[]{ "CompositeFilter", "FieldFilter", "UnaryFilter" }, new[]{ "FilterType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CompositeFilter), global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CompositeFilter.Parser, new[]{ "Op", "Filters" }, null, new[]{ typeof(global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CompositeFilter.Types.Operator) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldFilter), global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldFilter.Parser, new[]{ "Field", "Op", "Value" }, null, new[]{ typeof(global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldFilter.Types.Operator) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.UnaryFilter), global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.UnaryFilter.Parser, new[]{ "Op", "Field" }, new[]{ "OperandType" }, new[]{ typeof(global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.UnaryFilter.Types.Operator) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Order), global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Order.Parser, new[]{ "Field", "Direction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference), global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference.Parser, new[]{ "FieldPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Projection), global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Projection.Parser, new[]{ "Fields" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.Cursor), global::Google.Cloud.Firestore.V1Beta1.Cursor.Parser, new[]{ "Values", "Before" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A Firestore query.
  /// </summary>
  public sealed partial class StructuredQuery : pb::IMessage<StructuredQuery> {
    private static readonly pb::MessageParser<StructuredQuery> _parser = new pb::MessageParser<StructuredQuery>(() => new StructuredQuery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StructuredQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.QueryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StructuredQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StructuredQuery(StructuredQuery other) : this() {
      Select = other.select_ != null ? other.Select.Clone() : null;
      from_ = other.from_.Clone();
      Where = other.where_ != null ? other.Where.Clone() : null;
      orderBy_ = other.orderBy_.Clone();
      StartAt = other.startAt_ != null ? other.StartAt.Clone() : null;
      EndAt = other.endAt_ != null ? other.EndAt.Clone() : null;
      offset_ = other.offset_;
      Limit = other.Limit;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StructuredQuery Clone() {
      return new StructuredQuery(this);
    }

    /// <summary>Field number for the "select" field.</summary>
    public const int SelectFieldNumber = 1;
    private global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Projection select_;
    /// <summary>
    /// The projection to return.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Projection Select {
      get { return select_; }
      set {
        select_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CollectionSelector> _repeated_from_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CollectionSelector.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CollectionSelector> from_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CollectionSelector>();
    /// <summary>
    /// The collections to query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CollectionSelector> From {
      get { return from_; }
    }

    /// <summary>Field number for the "where" field.</summary>
    public const int WhereFieldNumber = 3;
    private global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Filter where_;
    /// <summary>
    /// The filter to apply.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Filter Where {
      get { return where_; }
      set {
        where_ = value;
      }
    }

    /// <summary>Field number for the "order_by" field.</summary>
    public const int OrderByFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Order> _repeated_orderBy_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Order.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Order> orderBy_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Order>();
    /// <summary>
    /// The order to apply to the query results.
    ///
    /// Firestore guarantees a stable ordering through the following rules:
    ///
    ///  * Any field required to appear in `order_by`, that is not already
    ///    specified in `order_by`, is appended to the order in field name order
    ///    by default.
    ///  * If an order on `__name__` is not specified, it is appended by default.
    ///
    /// Fields are appended with the same sort direction as the last order
    /// specified, or 'ASCENDING' if no order was specified. For example:
    ///
    ///  * `SELECT * FROM Foo ORDER BY A` becomes
    ///    `SELECT * FROM Foo ORDER BY A, __name__`
    ///  * `SELECT * FROM Foo ORDER BY A DESC` becomes
    ///    `SELECT * FROM Foo ORDER BY A DESC, __name__ DESC`
    ///  * `SELECT * FROM Foo WHERE A > 1` becomes
    ///    `SELECT * FROM Foo WHERE A > 1 ORDER BY A, __name__`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Order> OrderBy {
      get { return orderBy_; }
    }

    /// <summary>Field number for the "start_at" field.</summary>
    public const int StartAtFieldNumber = 7;
    private global::Google.Cloud.Firestore.V1Beta1.Cursor startAt_;
    /// <summary>
    /// A starting point for the query results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Cursor StartAt {
      get { return startAt_; }
      set {
        startAt_ = value;
      }
    }

    /// <summary>Field number for the "end_at" field.</summary>
    public const int EndAtFieldNumber = 8;
    private global::Google.Cloud.Firestore.V1Beta1.Cursor endAt_;
    /// <summary>
    /// A end point for the query results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Cursor EndAt {
      get { return endAt_; }
      set {
        endAt_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 6;
    private int offset_;
    /// <summary>
    /// The number of results to skip.
    ///
    /// Applies before limit, but after all other constraints. Must be >= 0 if
    /// specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 5;
    private static readonly pb::FieldCodec<int?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<int>(42);
    private int? limit_;
    /// <summary>
    /// The maximum number of results to return.
    ///
    /// Applies after all other constraints.
    /// Must be >= 0 if specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StructuredQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StructuredQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Select, other.Select)) return false;
      if(!from_.Equals(other.from_)) return false;
      if (!object.Equals(Where, other.Where)) return false;
      if(!orderBy_.Equals(other.orderBy_)) return false;
      if (!object.Equals(StartAt, other.StartAt)) return false;
      if (!object.Equals(EndAt, other.EndAt)) return false;
      if (Offset != other.Offset) return false;
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (select_ != null) hash ^= Select.GetHashCode();
      hash ^= from_.GetHashCode();
      if (where_ != null) hash ^= Where.GetHashCode();
      hash ^= orderBy_.GetHashCode();
      if (startAt_ != null) hash ^= StartAt.GetHashCode();
      if (endAt_ != null) hash ^= EndAt.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (select_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Select);
      }
      from_.WriteTo(output, _repeated_from_codec);
      if (where_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Where);
      }
      orderBy_.WriteTo(output, _repeated_orderBy_codec);
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (Offset != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Offset);
      }
      if (startAt_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(StartAt);
      }
      if (endAt_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(EndAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (select_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Select);
      }
      size += from_.CalculateSize(_repeated_from_codec);
      if (where_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Where);
      }
      size += orderBy_.CalculateSize(_repeated_orderBy_codec);
      if (startAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartAt);
      }
      if (endAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndAt);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StructuredQuery other) {
      if (other == null) {
        return;
      }
      if (other.select_ != null) {
        if (select_ == null) {
          select_ = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Projection();
        }
        Select.MergeFrom(other.Select);
      }
      from_.Add(other.from_);
      if (other.where_ != null) {
        if (where_ == null) {
          where_ = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Filter();
        }
        Where.MergeFrom(other.Where);
      }
      orderBy_.Add(other.orderBy_);
      if (other.startAt_ != null) {
        if (startAt_ == null) {
          startAt_ = new global::Google.Cloud.Firestore.V1Beta1.Cursor();
        }
        StartAt.MergeFrom(other.StartAt);
      }
      if (other.endAt_ != null) {
        if (endAt_ == null) {
          endAt_ = new global::Google.Cloud.Firestore.V1Beta1.Cursor();
        }
        EndAt.MergeFrom(other.EndAt);
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (select_ == null) {
              select_ = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Projection();
            }
            input.ReadMessage(select_);
            break;
          }
          case 18: {
            from_.AddEntriesFrom(input, _repeated_from_codec);
            break;
          }
          case 26: {
            if (where_ == null) {
              where_ = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Filter();
            }
            input.ReadMessage(where_);
            break;
          }
          case 34: {
            orderBy_.AddEntriesFrom(input, _repeated_orderBy_codec);
            break;
          }
          case 42: {
            int? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 48: {
            Offset = input.ReadInt32();
            break;
          }
          case 58: {
            if (startAt_ == null) {
              startAt_ = new global::Google.Cloud.Firestore.V1Beta1.Cursor();
            }
            input.ReadMessage(startAt_);
            break;
          }
          case 66: {
            if (endAt_ == null) {
              endAt_ = new global::Google.Cloud.Firestore.V1Beta1.Cursor();
            }
            input.ReadMessage(endAt_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StructuredQuery message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A sort direction.
      /// </summary>
      public enum Direction {
        /// <summary>
        /// Unspecified.
        /// </summary>
        [pbr::OriginalName("DIRECTION_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Ascending.
        /// </summary>
        [pbr::OriginalName("ASCENDING")] Ascending = 1,
        /// <summary>
        /// Descending.
        /// </summary>
        [pbr::OriginalName("DESCENDING")] Descending = 2,
      }

      /// <summary>
      /// A selection of a collection, such as `messages as m1`.
      /// </summary>
      public sealed partial class CollectionSelector : pb::IMessage<CollectionSelector> {
        private static readonly pb::MessageParser<CollectionSelector> _parser = new pb::MessageParser<CollectionSelector>(() => new CollectionSelector());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CollectionSelector> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionSelector() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionSelector(CollectionSelector other) : this() {
          collectionId_ = other.collectionId_;
          allDescendants_ = other.allDescendants_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionSelector Clone() {
          return new CollectionSelector(this);
        }

        /// <summary>Field number for the "collection_id" field.</summary>
        public const int CollectionIdFieldNumber = 2;
        private string collectionId_ = "";
        /// <summary>
        /// The collection ID.
        /// When set, selects only collections with this ID.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CollectionId {
          get { return collectionId_; }
          set {
            collectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "all_descendants" field.</summary>
        public const int AllDescendantsFieldNumber = 3;
        private bool allDescendants_;
        /// <summary>
        /// When false, selects only collections that are immediate children of
        /// the `parent` specified in the containing `RunQueryRequest`.
        /// When true, selects all descendant collections.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AllDescendants {
          get { return allDescendants_; }
          set {
            allDescendants_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CollectionSelector);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CollectionSelector other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CollectionId != other.CollectionId) return false;
          if (AllDescendants != other.AllDescendants) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CollectionId.Length != 0) hash ^= CollectionId.GetHashCode();
          if (AllDescendants != false) hash ^= AllDescendants.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CollectionId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(CollectionId);
          }
          if (AllDescendants != false) {
            output.WriteRawTag(24);
            output.WriteBool(AllDescendants);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CollectionId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionId);
          }
          if (AllDescendants != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CollectionSelector other) {
          if (other == null) {
            return;
          }
          if (other.CollectionId.Length != 0) {
            CollectionId = other.CollectionId;
          }
          if (other.AllDescendants != false) {
            AllDescendants = other.AllDescendants;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                CollectionId = input.ReadString();
                break;
              }
              case 24: {
                AllDescendants = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A filter.
      /// </summary>
      public sealed partial class Filter : pb::IMessage<Filter> {
        private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Filter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Filter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Filter(Filter other) : this() {
          switch (other.FilterTypeCase) {
            case FilterTypeOneofCase.CompositeFilter:
              CompositeFilter = other.CompositeFilter.Clone();
              break;
            case FilterTypeOneofCase.FieldFilter:
              FieldFilter = other.FieldFilter.Clone();
              break;
            case FilterTypeOneofCase.UnaryFilter:
              UnaryFilter = other.UnaryFilter.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Filter Clone() {
          return new Filter(this);
        }

        /// <summary>Field number for the "composite_filter" field.</summary>
        public const int CompositeFilterFieldNumber = 1;
        /// <summary>
        /// A composite filter.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CompositeFilter CompositeFilter {
          get { return filterTypeCase_ == FilterTypeOneofCase.CompositeFilter ? (global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CompositeFilter) filterType_ : null; }
          set {
            filterType_ = value;
            filterTypeCase_ = value == null ? FilterTypeOneofCase.None : FilterTypeOneofCase.CompositeFilter;
          }
        }

        /// <summary>Field number for the "field_filter" field.</summary>
        public const int FieldFilterFieldNumber = 2;
        /// <summary>
        /// A filter on a document field.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldFilter FieldFilter {
          get { return filterTypeCase_ == FilterTypeOneofCase.FieldFilter ? (global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldFilter) filterType_ : null; }
          set {
            filterType_ = value;
            filterTypeCase_ = value == null ? FilterTypeOneofCase.None : FilterTypeOneofCase.FieldFilter;
          }
        }

        /// <summary>Field number for the "unary_filter" field.</summary>
        public const int UnaryFilterFieldNumber = 3;
        /// <summary>
        /// A filter that takes exactly one argument.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.UnaryFilter UnaryFilter {
          get { return filterTypeCase_ == FilterTypeOneofCase.UnaryFilter ? (global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.UnaryFilter) filterType_ : null; }
          set {
            filterType_ = value;
            filterTypeCase_ = value == null ? FilterTypeOneofCase.None : FilterTypeOneofCase.UnaryFilter;
          }
        }

        private object filterType_;
        /// <summary>Enum of possible cases for the "filter_type" oneof.</summary>
        public enum FilterTypeOneofCase {
          None = 0,
          CompositeFilter = 1,
          FieldFilter = 2,
          UnaryFilter = 3,
        }
        private FilterTypeOneofCase filterTypeCase_ = FilterTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FilterTypeOneofCase FilterTypeCase {
          get { return filterTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFilterType() {
          filterTypeCase_ = FilterTypeOneofCase.None;
          filterType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Filter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Filter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(CompositeFilter, other.CompositeFilter)) return false;
          if (!object.Equals(FieldFilter, other.FieldFilter)) return false;
          if (!object.Equals(UnaryFilter, other.UnaryFilter)) return false;
          if (FilterTypeCase != other.FilterTypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (filterTypeCase_ == FilterTypeOneofCase.CompositeFilter) hash ^= CompositeFilter.GetHashCode();
          if (filterTypeCase_ == FilterTypeOneofCase.FieldFilter) hash ^= FieldFilter.GetHashCode();
          if (filterTypeCase_ == FilterTypeOneofCase.UnaryFilter) hash ^= UnaryFilter.GetHashCode();
          hash ^= (int) filterTypeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (filterTypeCase_ == FilterTypeOneofCase.CompositeFilter) {
            output.WriteRawTag(10);
            output.WriteMessage(CompositeFilter);
          }
          if (filterTypeCase_ == FilterTypeOneofCase.FieldFilter) {
            output.WriteRawTag(18);
            output.WriteMessage(FieldFilter);
          }
          if (filterTypeCase_ == FilterTypeOneofCase.UnaryFilter) {
            output.WriteRawTag(26);
            output.WriteMessage(UnaryFilter);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (filterTypeCase_ == FilterTypeOneofCase.CompositeFilter) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompositeFilter);
          }
          if (filterTypeCase_ == FilterTypeOneofCase.FieldFilter) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FieldFilter);
          }
          if (filterTypeCase_ == FilterTypeOneofCase.UnaryFilter) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnaryFilter);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Filter other) {
          if (other == null) {
            return;
          }
          switch (other.FilterTypeCase) {
            case FilterTypeOneofCase.CompositeFilter:
              if (CompositeFilter == null) {
                CompositeFilter = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CompositeFilter();
              }
              CompositeFilter.MergeFrom(other.CompositeFilter);
              break;
            case FilterTypeOneofCase.FieldFilter:
              if (FieldFilter == null) {
                FieldFilter = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldFilter();
              }
              FieldFilter.MergeFrom(other.FieldFilter);
              break;
            case FilterTypeOneofCase.UnaryFilter:
              if (UnaryFilter == null) {
                UnaryFilter = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.UnaryFilter();
              }
              UnaryFilter.MergeFrom(other.UnaryFilter);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CompositeFilter subBuilder = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CompositeFilter();
                if (filterTypeCase_ == FilterTypeOneofCase.CompositeFilter) {
                  subBuilder.MergeFrom(CompositeFilter);
                }
                input.ReadMessage(subBuilder);
                CompositeFilter = subBuilder;
                break;
              }
              case 18: {
                global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldFilter subBuilder = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldFilter();
                if (filterTypeCase_ == FilterTypeOneofCase.FieldFilter) {
                  subBuilder.MergeFrom(FieldFilter);
                }
                input.ReadMessage(subBuilder);
                FieldFilter = subBuilder;
                break;
              }
              case 26: {
                global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.UnaryFilter subBuilder = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.UnaryFilter();
                if (filterTypeCase_ == FilterTypeOneofCase.UnaryFilter) {
                  subBuilder.MergeFrom(UnaryFilter);
                }
                input.ReadMessage(subBuilder);
                UnaryFilter = subBuilder;
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A filter that merges multiple other filters using the given operator.
      /// </summary>
      public sealed partial class CompositeFilter : pb::IMessage<CompositeFilter> {
        private static readonly pb::MessageParser<CompositeFilter> _parser = new pb::MessageParser<CompositeFilter>(() => new CompositeFilter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CompositeFilter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CompositeFilter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CompositeFilter(CompositeFilter other) : this() {
          op_ = other.op_;
          filters_ = other.filters_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CompositeFilter Clone() {
          return new CompositeFilter(this);
        }

        /// <summary>Field number for the "op" field.</summary>
        public const int OpFieldNumber = 1;
        private global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CompositeFilter.Types.Operator op_ = 0;
        /// <summary>
        /// The operator for combining multiple filters.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CompositeFilter.Types.Operator Op {
          get { return op_; }
          set {
            op_ = value;
          }
        }

        /// <summary>Field number for the "filters" field.</summary>
        public const int FiltersFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Filter> _repeated_filters_codec
            = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Filter.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Filter> filters_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Filter>();
        /// <summary>
        /// The list of filters to combine.
        /// Must contain at least one filter.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Filter> Filters {
          get { return filters_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CompositeFilter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CompositeFilter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Op != other.Op) return false;
          if(!filters_.Equals(other.filters_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Op != 0) hash ^= Op.GetHashCode();
          hash ^= filters_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Op != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Op);
          }
          filters_.WriteTo(output, _repeated_filters_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Op != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
          }
          size += filters_.CalculateSize(_repeated_filters_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CompositeFilter other) {
          if (other == null) {
            return;
          }
          if (other.Op != 0) {
            Op = other.Op;
          }
          filters_.Add(other.filters_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                op_ = (global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.CompositeFilter.Types.Operator) input.ReadEnum();
                break;
              }
              case 18: {
                filters_.AddEntriesFrom(input, _repeated_filters_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CompositeFilter message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// A composite filter operator.
          /// </summary>
          public enum Operator {
            /// <summary>
            /// Unspecified. This value must not be used.
            /// </summary>
            [pbr::OriginalName("OPERATOR_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// The results are required to satisfy each of the combined filters.
            /// </summary>
            [pbr::OriginalName("AND")] And = 1,
          }

        }
        #endregion

      }

      /// <summary>
      /// A filter on a specific field.
      /// </summary>
      public sealed partial class FieldFilter : pb::IMessage<FieldFilter> {
        private static readonly pb::MessageParser<FieldFilter> _parser = new pb::MessageParser<FieldFilter>(() => new FieldFilter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FieldFilter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldFilter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldFilter(FieldFilter other) : this() {
          Field = other.field_ != null ? other.Field.Clone() : null;
          op_ = other.op_;
          Value = other.value_ != null ? other.Value.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldFilter Clone() {
          return new FieldFilter(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference field_;
        /// <summary>
        /// The field to filter by.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference Field {
          get { return field_; }
          set {
            field_ = value;
          }
        }

        /// <summary>Field number for the "op" field.</summary>
        public const int OpFieldNumber = 2;
        private global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldFilter.Types.Operator op_ = 0;
        /// <summary>
        /// The operator to filter by.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldFilter.Types.Operator Op {
          get { return op_; }
          set {
            op_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 3;
        private global::Google.Cloud.Firestore.V1Beta1.Value value_;
        /// <summary>
        /// The value to compare to.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Firestore.V1Beta1.Value Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FieldFilter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FieldFilter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Field, other.Field)) return false;
          if (Op != other.Op) return false;
          if (!object.Equals(Value, other.Value)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (field_ != null) hash ^= Field.GetHashCode();
          if (Op != 0) hash ^= Op.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (field_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Field);
          }
          if (Op != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Op);
          }
          if (value_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (field_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
          }
          if (Op != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FieldFilter other) {
          if (other == null) {
            return;
          }
          if (other.field_ != null) {
            if (field_ == null) {
              field_ = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference();
            }
            Field.MergeFrom(other.Field);
          }
          if (other.Op != 0) {
            Op = other.Op;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              value_ = new global::Google.Cloud.Firestore.V1Beta1.Value();
            }
            Value.MergeFrom(other.Value);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (field_ == null) {
                  field_ = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference();
                }
                input.ReadMessage(field_);
                break;
              }
              case 16: {
                op_ = (global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldFilter.Types.Operator) input.ReadEnum();
                break;
              }
              case 26: {
                if (value_ == null) {
                  value_ = new global::Google.Cloud.Firestore.V1Beta1.Value();
                }
                input.ReadMessage(value_);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the FieldFilter message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// A field filter operator.
          /// </summary>
          public enum Operator {
            /// <summary>
            /// Unspecified. This value must not be used.
            /// </summary>
            [pbr::OriginalName("OPERATOR_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// Less than. Requires that the field come first in `order_by`.
            /// </summary>
            [pbr::OriginalName("LESS_THAN")] LessThan = 1,
            /// <summary>
            /// Less than or equal. Requires that the field come first in `order_by`.
            /// </summary>
            [pbr::OriginalName("LESS_THAN_OR_EQUAL")] LessThanOrEqual = 2,
            /// <summary>
            /// Greater than. Requires that the field come first in `order_by`.
            /// </summary>
            [pbr::OriginalName("GREATER_THAN")] GreaterThan = 3,
            /// <summary>
            /// Greater than or equal. Requires that the field come first in
            /// `order_by`.
            /// </summary>
            [pbr::OriginalName("GREATER_THAN_OR_EQUAL")] GreaterThanOrEqual = 4,
            /// <summary>
            /// Equal.
            /// </summary>
            [pbr::OriginalName("EQUAL")] Equal = 5,
            /// <summary>
            /// Contains. Requires that the field is an array.
            /// </summary>
            [pbr::OriginalName("ARRAY_CONTAINS")] ArrayContains = 7,
          }

        }
        #endregion

      }

      /// <summary>
      /// A filter with a single operand.
      /// </summary>
      public sealed partial class UnaryFilter : pb::IMessage<UnaryFilter> {
        private static readonly pb::MessageParser<UnaryFilter> _parser = new pb::MessageParser<UnaryFilter>(() => new UnaryFilter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UnaryFilter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnaryFilter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnaryFilter(UnaryFilter other) : this() {
          op_ = other.op_;
          switch (other.OperandTypeCase) {
            case OperandTypeOneofCase.Field:
              Field = other.Field.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnaryFilter Clone() {
          return new UnaryFilter(this);
        }

        /// <summary>Field number for the "op" field.</summary>
        public const int OpFieldNumber = 1;
        private global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.UnaryFilter.Types.Operator op_ = 0;
        /// <summary>
        /// The unary operator to apply.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.UnaryFilter.Types.Operator Op {
          get { return op_; }
          set {
            op_ = value;
          }
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 2;
        /// <summary>
        /// The field to which to apply the operator.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference Field {
          get { return operandTypeCase_ == OperandTypeOneofCase.Field ? (global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference) operandType_ : null; }
          set {
            operandType_ = value;
            operandTypeCase_ = value == null ? OperandTypeOneofCase.None : OperandTypeOneofCase.Field;
          }
        }

        private object operandType_;
        /// <summary>Enum of possible cases for the "operand_type" oneof.</summary>
        public enum OperandTypeOneofCase {
          None = 0,
          Field = 2,
        }
        private OperandTypeOneofCase operandTypeCase_ = OperandTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OperandTypeOneofCase OperandTypeCase {
          get { return operandTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOperandType() {
          operandTypeCase_ = OperandTypeOneofCase.None;
          operandType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UnaryFilter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UnaryFilter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Op != other.Op) return false;
          if (!object.Equals(Field, other.Field)) return false;
          if (OperandTypeCase != other.OperandTypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Op != 0) hash ^= Op.GetHashCode();
          if (operandTypeCase_ == OperandTypeOneofCase.Field) hash ^= Field.GetHashCode();
          hash ^= (int) operandTypeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Op != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Op);
          }
          if (operandTypeCase_ == OperandTypeOneofCase.Field) {
            output.WriteRawTag(18);
            output.WriteMessage(Field);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Op != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
          }
          if (operandTypeCase_ == OperandTypeOneofCase.Field) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UnaryFilter other) {
          if (other == null) {
            return;
          }
          if (other.Op != 0) {
            Op = other.Op;
          }
          switch (other.OperandTypeCase) {
            case OperandTypeOneofCase.Field:
              if (Field == null) {
                Field = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference();
              }
              Field.MergeFrom(other.Field);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                op_ = (global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.UnaryFilter.Types.Operator) input.ReadEnum();
                break;
              }
              case 18: {
                global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference subBuilder = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference();
                if (operandTypeCase_ == OperandTypeOneofCase.Field) {
                  subBuilder.MergeFrom(Field);
                }
                input.ReadMessage(subBuilder);
                Field = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the UnaryFilter message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// A unary operator.
          /// </summary>
          public enum Operator {
            /// <summary>
            /// Unspecified. This value must not be used.
            /// </summary>
            [pbr::OriginalName("OPERATOR_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// Test if a field is equal to NaN.
            /// </summary>
            [pbr::OriginalName("IS_NAN")] IsNan = 2,
            /// <summary>
            /// Test if an exprestion evaluates to Null.
            /// </summary>
            [pbr::OriginalName("IS_NULL")] IsNull = 3,
          }

        }
        #endregion

      }

      /// <summary>
      /// An order on a field.
      /// </summary>
      public sealed partial class Order : pb::IMessage<Order> {
        private static readonly pb::MessageParser<Order> _parser = new pb::MessageParser<Order>(() => new Order());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Order> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Order() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Order(Order other) : this() {
          Field = other.field_ != null ? other.Field.Clone() : null;
          direction_ = other.direction_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Order Clone() {
          return new Order(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference field_;
        /// <summary>
        /// The field to order by.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference Field {
          get { return field_; }
          set {
            field_ = value;
          }
        }

        /// <summary>Field number for the "direction" field.</summary>
        public const int DirectionFieldNumber = 2;
        private global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Direction direction_ = 0;
        /// <summary>
        /// The direction to order by. Defaults to `ASCENDING`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Direction Direction {
          get { return direction_; }
          set {
            direction_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Order);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Order other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Field, other.Field)) return false;
          if (Direction != other.Direction) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (field_ != null) hash ^= Field.GetHashCode();
          if (Direction != 0) hash ^= Direction.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (field_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Field);
          }
          if (Direction != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Direction);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (field_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
          }
          if (Direction != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Order other) {
          if (other == null) {
            return;
          }
          if (other.field_ != null) {
            if (field_ == null) {
              field_ = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference();
            }
            Field.MergeFrom(other.Field);
          }
          if (other.Direction != 0) {
            Direction = other.Direction;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (field_ == null) {
                  field_ = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference();
                }
                input.ReadMessage(field_);
                break;
              }
              case 16: {
                direction_ = (global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.Direction) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A reference to a field, such as `max(messages.time) as max_time`.
      /// </summary>
      public sealed partial class FieldReference : pb::IMessage<FieldReference> {
        private static readonly pb::MessageParser<FieldReference> _parser = new pb::MessageParser<FieldReference>(() => new FieldReference());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FieldReference> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldReference() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldReference(FieldReference other) : this() {
          fieldPath_ = other.fieldPath_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldReference Clone() {
          return new FieldReference(this);
        }

        /// <summary>Field number for the "field_path" field.</summary>
        public const int FieldPathFieldNumber = 2;
        private string fieldPath_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FieldPath {
          get { return fieldPath_; }
          set {
            fieldPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FieldReference);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FieldReference other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FieldPath != other.FieldPath) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FieldPath.Length != 0) hash ^= FieldPath.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FieldPath.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(FieldPath);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FieldPath.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldPath);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FieldReference other) {
          if (other == null) {
            return;
          }
          if (other.FieldPath.Length != 0) {
            FieldPath = other.FieldPath;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                FieldPath = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The projection of document's fields to return.
      /// </summary>
      public sealed partial class Projection : pb::IMessage<Projection> {
        private static readonly pb::MessageParser<Projection> _parser = new pb::MessageParser<Projection>(() => new Projection());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Projection> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projection() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projection(Projection other) : this() {
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projection Clone() {
          return new Projection(this);
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int FieldsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference> fields_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference>();
        /// <summary>
        /// The fields to return.
        ///
        /// If empty, all fields are returned. To only return the name
        /// of the document, use `['__name__']`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.StructuredQuery.Types.FieldReference> Fields {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Projection);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Projection other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Projection other) {
          if (other == null) {
            return;
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// A position in a query result set.
  /// </summary>
  public sealed partial class Cursor : pb::IMessage<Cursor> {
    private static readonly pb::MessageParser<Cursor> _parser = new pb::MessageParser<Cursor>(() => new Cursor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cursor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.QueryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cursor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cursor(Cursor other) : this() {
      values_ = other.values_.Clone();
      before_ = other.before_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cursor Clone() {
      return new Cursor(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.Value> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Firestore.V1Beta1.Value.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Value> values_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Value>();
    /// <summary>
    /// The values that represent a position, in the order they appear in
    /// the order by clause of a query.
    ///
    /// Can contain fewer values than specified in the order by clause.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Value> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "before" field.</summary>
    public const int BeforeFieldNumber = 2;
    private bool before_;
    /// <summary>
    /// If the position is just before or just after the given values, relative
    /// to the sort order defined by the query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Before {
      get { return before_; }
      set {
        before_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cursor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cursor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      if (Before != other.Before) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (Before != false) hash ^= Before.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (Before != false) {
        output.WriteRawTag(16);
        output.WriteBool(Before);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (Before != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cursor other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      if (other.Before != false) {
        Before = other.Before;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 16: {
            Before = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
